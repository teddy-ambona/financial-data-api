---
name: Pipeline
on: [push]

env:
  IMAGE_VERSION: 0.1.0

jobs:
  # yamllint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Lint with yamllint
  #       run: |
  #         make yamllint

  # flake8:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Lint with flake8
  #       run: |
  #         make flake8

  # pydocstyle:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Lint with pydocstyle
  #       run: |
  #         make pydocstyle

  # safety:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Check for python vulnerablities
  #       run: |
  #         make safety

  # image-misconfiguration:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Run Trivy misconfiguration scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: config
  #         format: table
  #         exit-code: 1
  #         vuln-type: security-check
  #         severity: CRITICAL,HIGH

  # build:
  #   # Build Docker image and upload it to the pipeline artifacts.
  #   # The image will be re-used in the downstream jobs
  #   needs: [flake8, pydocstyle, yamllint, safety, image-misconfiguration]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Update .pgpass with secret values
  #       # This is a template only, in production/development environment
  #       # secrets should be injected using secret variables.
  #       run: |
  #         sed -i 's/DB_USERNAME/postgres/g' config/.pgpass
  #         sed -i 's/DB_PASSWORD/postgres/g' config/.pgpass

  #     - name: Build image tag
  #       run: |
  #         BRANCH_NAME=${GITHUB_REF##*/}
  #         echo "$BRANCH_NAME"
  #         SUFFIX=""
  #         if [ "$BRANCH_NAME" != "main" ]; then
  #           SUFFIX="-${BRANCH_NAME}+dev.${GITHUB_SHA}"
  #         fi
  #         echo "IMAGE_TAG=${IMAGE_VERSION}${SUFFIX}" >> $GITHUB_ENV

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         tags: ${{ env.IMAGE_TAG }}
  #         outputs: type=docker,dest=/tmp/flask-app.tar

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: flask-app
  #         path: /tmp/flask-app.tar

  # image-vulnerabilities:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: flask-app
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/flask-app.tar
  #         docker image ls -a

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: flask-app:${{ env.IMAGE_TAG }}
  #         format: table
  #         exit-code: 1
  #         ignore-unfixed: true
  #         vuln-type: os,library
  #         severity: CRITICAL,HIGH

  # integration-tests:
  #   needs: [image-vulnerabilities]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: flask-app
  #         path: /tmp

  #     - name: Load Docker image
  #       run: |
  #         docker load --input /tmp/flask-app.tar
  #         docker image ls -a

  #     - name: checkout repo
  #       uses: actions/checkout@v2

  #     - name: Run integration tests
  #       run: |
  #         make setup-db
  #         make IMAGE_TAG=${IMAGE_TAG} integration-tests

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Set IMAGE_TAG
        run: |
          echo "IMAGE_TAG=MY_IMAGE_TAG_VERSION999" >> ${GITHUB_ENV}
          cat ${GITHUB_ENV}
          echo HELLO WORLD

  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: test
    runs-on: ubuntu-latest
    steps:
      # - name: Check out the repo
      #   uses: actions/checkout@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Download artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: flask-app
      #     path: /tmp

      # - name: Load Docker image
      #   run: |
      #     docker load --input /tmp/flask-app.tar
      #     docker image ls -a

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print IMAGE_TAG
        run: |
          echo HELLO WORLD2
          cat ${GITHUB_ENV}
          echo ${IMAGE_TAG}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.IMAGE_TAG }}
