---
name: Application code CICD Pipeline
on: [push]

env:
  APP_IMAGE_VERSION: 1.1.0
  NGINX_IMAGE_VERSION: 1.0.0
  APP_DOCKER_REPOSITORY: tambona29/financial-data-api
  NGINX_DOCKER_REPOSITORY: tambona29/nginx-demo
jobs:
  yamllint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v2
      - name: Lint with yamllint
        run: |
          make yamllint

  flake8:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v2
      - name: Lint with flake8
        run: |
          make flake8

  pydocstyle:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v2
      - name: Lint with pydocstyle
        run: |
          make pydocstyle

  safety:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v2
      - name: Check for python vulnerablities
        run: |
          make safety

  image-misconfiguration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run Trivy misconfiguration scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config

          # File to scan
          scan-ref: app/docker/app/Dockerfile
          format: table
          exit-code: 1
          vuln-type: security-check
          severity: CRITICAL,HIGH

  build:
    # Build Docker image and upload it to the pipeline artifacts.
    # The image will be re-used in the downstream jobs
    needs: [flake8, pydocstyle, yamllint, safety, image-misconfiguration]
    runs-on: ubuntu-latest
    steps:
      - name: Build image tag
        id: build_image_tag
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "$BRANCH_NAME"
          SUFFIX=""
          if [ "$BRANCH_NAME" != "main" ]; then
            SUFFIX="-${BRANCH_NAME}.dev.${GITHUB_SHA}"
          fi
          echo "::set-output name=SUFFIX::${SUFFIX}"
          echo "::set-output name=IMAGE_TAG::${APP_DOCKER_REPOSITORY}:${APP_IMAGE_VERSION}${SUFFIX}"
          echo "::set-output name=ACT::${ACT}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./app/docker/app/Dockerfile
          tags: ${{ steps.build_image_tag.outputs.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/flask-app.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: flask-app
          path: /tmp/flask-app.tar
    outputs:
      SUFFIX: ${{ steps.build_image_tag.outputs.SUFFIX }}
      IMAGE_TAG: ${{ steps.build_image_tag.outputs.IMAGE_TAG }}
      ACT: ${{ steps.build_image_tag.outputs.ACT }}

  image-vulnerabilities:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: flask-app
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/flask-app.tar
          docker image ls -a

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.IMAGE_TAG }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: library
          severity: CRITICAL,HIGH

  unit-tests:
    needs: [build, image-vulnerabilities]
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build.outputs.IMAGE_TAG }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: flask-app
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/flask-app.tar
          docker image ls -a

      - name: checkout repo
        uses: actions/checkout@v2

      - name: Run unit tests
        run: |
          cd app && make IMAGE_TAG=${IMAGE_TAG} unit-tests

  integration-tests:
    needs: [build, image-vulnerabilities]
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build.outputs.IMAGE_TAG }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: flask-app
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/flask-app.tar
          docker image ls -a

      - name: checkout repo
        uses: actions/checkout@v2

      - name: Install docker-compose if running pipeline locally
        run: |
          if ! command -v docker-compose &> /dev/null; then
            echo Installing docker-compose

            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose

            chmod +x /usr/local/bin/docker-compose
          fi

      - name: Run integration tests
        run: |
          cd app && make IMAGE_TAG=${IMAGE_TAG} integration-tests

  push-app-image-to-registry:
    # Ensure this job is skipped when running locally with act
    # ${{ !env.ACT }} does not work here so we use the job outputs instead
    # issue: https://github.com/actions/runner/issues/480
    if: ${{ !needs.build.outputs.ACT}}

    needs: [build, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: flask-app
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/flask-app.tar
          docker image ls -a

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push application server Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./app
          push: true
          tags: ${{ needs.build.outputs.IMAGE_TAG }}

  push-nginx-image-to-registry:
      # Ensure this job is skipped when running locally with act
      # ${{ !env.ACT }} does not work here so we use the job outputs instead
      # issue: https://github.com/actions/runner/issues/480
      if: ${{ !needs.build.outputs.ACT}}

      needs: [build, integration-tests]
      runs-on: ubuntu-latest
      steps:
        - name: Check out the repo
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Log in to Docker Hub
          uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push custom Nginx Docker image
          uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
          with:
            context: ./app
            file: ./app/docker/nginx/Dockerfile
            push: true
            tags: ${NGINX_DOCKER_REPOSITORY}:${NGINX_IMAGE_VERSION}${{ needs.build.outputs.SUFFIX }}
